"""
Chat API Endpoints
Handles chat queries and conversations
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Dict
import logging

from chatbot.chatbot import chatbot

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/chat", tags=["chat"])


class QueryRequest(BaseModel):
    """Request model for chat queries"""
    query: str
    role: Optional[str] = None
    top_k: Optional[int] = 3


class QueryResponse(BaseModel):
    """Response model for chat queries"""
    success: bool
    answer: str
    stakeholder: str
    confidence: float
    sources: List[Dict]
    context_used: int
    error: Optional[str] = None


@router.post("/query", response_model=QueryResponse)
async def process_query(request: QueryRequest):
    """
    Process a chat query and return answer
    
    Args:
        request: Query request with question and optional role
        
    Returns:
        Answer with sources and metadata
    """
    try:
        logger.info(f"Received query: {request.query}")
        
        # Process query through chatbot
        response = chatbot.chat(
            query=request.query,
            user_role=request.role,
            top_k=request.top_k
        )
        
        return QueryResponse(**response)
        
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "chat",
        "message": "Chat service is running"
    }
